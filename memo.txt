作成記録
*TODO*
- 入力の3次元対応
目下の問題は
Array<f32, D>に対して、batch_dataを取り出せない事。
Array2<f32>なら、Array::from_shape_fn((m, n), |(i,j)| data[batch_idx[i], j])
てな感じで、一応できていたが、dimentionをジェネリックにした事で、data[x, y]が使えなくなって困っている。
そもそも部分的なarrayを取り出す方法としては、.sliceが普通のようで、
slice_axisというメソッドもあって、
arr.slice_axis(Axis(1), Slice::from(1..5))
とする事で、一般のArray<_, D>に対してnumpyでいうところの
arr[:, 1:5]ができるようだ(Dが1次元以下ならpanicするのだろう)が、
このスライスというやつが、任意のインデックスではなく、1..6;2( = [1, 3, 5])
みたいに、start, stop, stepで決まるものしか使えないので困る。
一応、同じインデックスがきたら、二重の参照が発生し得てまずいという事だろうか、、、
いや、可変参照でなければ問題なくないか??
ArrayViewは不変参照だろう。可変参照はArrayViewMutかなんかなはずだ。

11/28 
ここ2週間くらいずっとやっているな...
putsマクロ作成
SimpleCBOWモデル作成に取り掛かる。
その過程で、TwoLayerNetから流用しようとすると、入力が2次元という前提が崩れるので、
次元のジェネリック化に取り組む。
ジェネリック次元で受け取ってから
        let x = contexts
            .into_dimensionality::<Ix3>()
            .expect("contexts array must be dim3");
という感じで次元チェックしてキャストすることができるので、個別メソッドはかけそうだが、
初めの方の、2次元、3次元共通の操作をどう書くかが問題。